(()=>{"use strict";var __webpack_modules__={984:()=>{eval('\n;// CONCATENATED MODULE: ../common/ipc.js\nclass IPC {\n  constructor(context) {\n    if (!context) throw new Error("Context is required");\n    this.context = context;\n  }\n\n  createHash() {\n    return Math.random().toString(36).substr(2, 10);\n  }\n\n  reply(message, data) {\n    this.send(message.event + "-reply", data, void 0, message.hash);\n  }\n\n  on(event, listener, once = false) {\n    const wrappedListener = message => {\n      if (message.data.event !== event || message.data.context === this.context) return;\n      const returnValue = listener(message.data, message.data.data);\n\n      if (returnValue == true && once) {\n        window.removeEventListener("message", wrappedListener);\n      }\n    };\n\n    window.addEventListener("message", wrappedListener);\n  }\n\n  send(event, data, callback = null, hash) {\n    if (!hash) hash = this.createHash();\n\n    if (callback) {\n      this.on(event + "-reply", message => {\n        if (message.hash === hash) {\n          callback(message.data);\n          return true;\n        }\n\n        return false;\n      }, true);\n    }\n\n    window.postMessage({\n      source: "betterdiscord-browser-" + this.context,\n      event: event,\n      context: this.context,\n      hash: hash,\n      data\n    });\n  }\n\n}\n;\n;// CONCATENATED MODULE: ../common/constants.js\nconst IPCEvents = {\n  INJECT_CSS: "bdbrowser-inject-css",\n  MAKE_REQUESTS: "bdbrowser-make-requests",\n  INJECT_THEME: "bdbrowser-inject-theme"\n};\n;// CONCATENATED MODULE: ../common/dom.js\nclass DOM {\n  /**@returns {HTMLElement} */\n  static createElement(type, options = {}, ...children) {\n    const node = document.createElement(type);\n    Object.assign(node, options);\n\n    for (const child of children) {\n      node.append(child);\n    }\n\n    return node;\n  }\n\n  static injectTheme(id, css) {\n    const [bdThemes] = document.getElementsByTagName("bd-themes");\n    const style = this.createElement("style", {\n      id: id,\n      type: "text/css",\n      innerHTML: css\n    });\n    style.setAttribute("data-bd-native", "");\n    bdThemes.append(style);\n  }\n\n  static injectCSS(id, css) {\n    const style = this.createElement("style", {\n      id: id,\n      type: "text/css",\n      innerHTML: css\n    });\n    this.headAppend(style);\n  }\n\n  static removeCSS(id) {\n    const style = document.querySelector("style#" + id);\n\n    if (style) {\n      style.remove();\n    }\n  }\n\n  static injectJS(id, src, silent = true) {\n    const script = this.createElement("script", {\n      id: id,\n      type: "text/javascript",\n      src: src\n    });\n    this.headAppend(script);\n    if (silent) script.addEventListener("load", () => {\n      script.remove();\n    }, {\n      once: true\n    });\n  }\n\n}\nDOM.headAppend = document.head.append.bind(document.head);\n;// CONCATENATED MODULE: ../common/logger.js\nclass Logger {\n  static _parseType(type) {\n    switch (type) {\n      case "info":\n      case "warn":\n      case "error":\n        return type;\n\n      default:\n        return "log";\n    }\n  }\n\n  static _log(type, module, ...nessage) {\n    type = this._parseType(type);\n    console[type](`%c[BetterDiscord]%c %c[${module}]%c`, "color: #3E82E5; font-weight: 700;", "", "color: #396CB8", "", ...nessage);\n  }\n\n  static log(module, ...message) {\n    this._log("log", module, ...message);\n  }\n\n  static info(module, ...message) {\n    this._log("info", module, ...message);\n  }\n\n  static warn(module, ...message) {\n    this._log("warn", module, ...message);\n  }\n\n  static error(module, ...message) {\n    this._log("error", module, ...message);\n  }\n\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\nLogger.log("Backend", "Initializing modules");\nconst ipcMain = new IPC("backend");\nLogger.log("Backend", "Registering events");\nipcMain.on(IPCEvents.INJECT_CSS, (_, data) => {\n  DOM.injectCSS(data.id, data.css);\n});\nipcMain.on(IPCEvents.INJECT_THEME, (_, data) => {\n  DOM.injectTheme(data.id, data.css);\n});\nipcMain.on(IPCEvents.MAKE_REQUESTS, (event, data) => {\n  fetch(data.url).catch(console.error.bind(null, "REQUEST FAILED:")).then(res => res.text()).then(text => {\n    ipcMain.reply(event, text);\n  });\n});\n\nconst SCRIPT_URL = (() => {\n  switch ("production") {\n    case "production":\n      return "https://strencher.github.io/BdBrowser/dist/frontend.js";\n\n    case "development":\n      return "http://127.0.0.1:5500/frontend.js";\n\n    default:\n      throw new Error("Unknown Environment");\n  }\n})();\n\nLogger.log("Backend", "Loading frontend script from", SCRIPT_URL);\nDOM.injectJS("BetterDiscordBrowser-frontend", SCRIPT_URL, false);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9jb21tb24vaXBjLmpzPzQ5M2UiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9jb25zdGFudHMuanM/NzEwNSIsIndlYnBhY2s6Ly8vLi4vY29tbW9uL2RvbS5qcz8wZjRiIiwid2VicGFjazovLy8uLi9jb21tb24vbG9nZ2VyLmpzPzJmYTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzP2ZhNjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSVBDIHtcbiAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgIGlmICghY29udGV4dCkgdGhyb3cgbmV3IEVycm9yKFwiQ29udGV4dCBpcyByZXF1aXJlZFwiKTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgY3JlYXRlSGFzaCgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDEwKTtcbiAgfVxuXG4gIHJlcGx5KG1lc3NhZ2UsIGRhdGEpIHtcbiAgICB0aGlzLnNlbmQobWVzc2FnZS5ldmVudCArIFwiLXJlcGx5XCIsIGRhdGEsIHZvaWQgMCwgbWVzc2FnZS5oYXNoKTtcbiAgfVxuXG4gIG9uKGV2ZW50LCBsaXN0ZW5lciwgb25jZSA9IGZhbHNlKSB7XG4gICAgY29uc3Qgd3JhcHBlZExpc3RlbmVyID0gbWVzc2FnZSA9PiB7XG4gICAgICBpZiAobWVzc2FnZS5kYXRhLmV2ZW50ICE9PSBldmVudCB8fCBtZXNzYWdlLmRhdGEuY29udGV4dCA9PT0gdGhpcy5jb250ZXh0KSByZXR1cm47XG4gICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IGxpc3RlbmVyKG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5kYXRhLmRhdGEpO1xuXG4gICAgICBpZiAocmV0dXJuVmFsdWUgPT0gdHJ1ZSAmJiBvbmNlKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB3cmFwcGVkTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgd3JhcHBlZExpc3RlbmVyKTtcbiAgfVxuXG4gIHNlbmQoZXZlbnQsIGRhdGEsIGNhbGxiYWNrID0gbnVsbCwgaGFzaCkge1xuICAgIGlmICghaGFzaCkgaGFzaCA9IHRoaXMuY3JlYXRlSGFzaCgpO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKGV2ZW50ICsgXCItcmVwbHlcIiwgbWVzc2FnZSA9PiB7XG4gICAgICAgIGlmIChtZXNzYWdlLmhhc2ggPT09IGhhc2gpIHtcbiAgICAgICAgICBjYWxsYmFjayhtZXNzYWdlLmRhdGEpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgd2luZG93LnBvc3RNZXNzYWdlKHtcbiAgICAgIHNvdXJjZTogXCJiZXR0ZXJkaXNjb3JkLWJyb3dzZXItXCIgKyB0aGlzLmNvbnRleHQsXG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICBoYXNoOiBoYXNoLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG5cbn1cbjsiLCJleHBvcnQgY29uc3QgSVBDRXZlbnRzID0ge1xuICBJTkpFQ1RfQ1NTOiBcImJkYnJvd3Nlci1pbmplY3QtY3NzXCIsXG4gIE1BS0VfUkVRVUVTVFM6IFwiYmRicm93c2VyLW1ha2UtcmVxdWVzdHNcIixcbiAgSU5KRUNUX1RIRU1FOiBcImJkYnJvd3Nlci1pbmplY3QtdGhlbWVcIlxufTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBET00ge1xuICAvKipAcmV0dXJucyB7SFRNTEVsZW1lbnR9ICovXG4gIHN0YXRpYyBjcmVhdGVFbGVtZW50KHR5cGUsIG9wdGlvbnMgPSB7fSwgLi4uY2hpbGRyZW4pIHtcbiAgICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcbiAgICBPYmplY3QuYXNzaWduKG5vZGUsIG9wdGlvbnMpO1xuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgbm9kZS5hcHBlbmQoY2hpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgc3RhdGljIGluamVjdFRoZW1lKGlkLCBjc3MpIHtcbiAgICBjb25zdCBbYmRUaGVtZXNdID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJiZC10aGVtZXNcIik7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCB7XG4gICAgICBpZDogaWQsXG4gICAgICB0eXBlOiBcInRleHQvY3NzXCIsXG4gICAgICBpbm5lckhUTUw6IGNzc1xuICAgIH0pO1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcImRhdGEtYmQtbmF0aXZlXCIsIFwiXCIpO1xuICAgIGJkVGhlbWVzLmFwcGVuZChzdHlsZSk7XG4gIH1cblxuICBzdGF0aWMgaW5qZWN0Q1NTKGlkLCBjc3MpIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHR5cGU6IFwidGV4dC9jc3NcIixcbiAgICAgIGlubmVySFRNTDogY3NzXG4gICAgfSk7XG4gICAgdGhpcy5oZWFkQXBwZW5kKHN0eWxlKTtcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVDU1MoaWQpIHtcbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZSNcIiArIGlkKTtcblxuICAgIGlmIChzdHlsZSkge1xuICAgICAgc3R5bGUucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGluamVjdEpTKGlkLCBzcmMsIHNpbGVudCA9IHRydWUpIHtcbiAgICBjb25zdCBzY3JpcHQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgdHlwZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgIHNyYzogc3JjXG4gICAgfSk7XG4gICAgdGhpcy5oZWFkQXBwZW5kKHNjcmlwdCk7XG4gICAgaWYgKHNpbGVudCkgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICB9LCB7XG4gICAgICBvbmNlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxufVxuRE9NLmhlYWRBcHBlbmQgPSBkb2N1bWVudC5oZWFkLmFwcGVuZC5iaW5kKGRvY3VtZW50LmhlYWQpOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2dlciB7XG4gIHN0YXRpYyBfcGFyc2VUeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJpbmZvXCI6XG4gICAgICBjYXNlIFwid2FyblwiOlxuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJsb2dcIjtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX2xvZyh0eXBlLCBtb2R1bGUsIC4uLm5lc3NhZ2UpIHtcbiAgICB0eXBlID0gdGhpcy5fcGFyc2VUeXBlKHR5cGUpO1xuICAgIGNvbnNvbGVbdHlwZV0oYCVjW0JldHRlckRpc2NvcmRdJWMgJWNbJHttb2R1bGV9XSVjYCwgXCJjb2xvcjogIzNFODJFNTsgZm9udC13ZWlnaHQ6IDcwMDtcIiwgXCJcIiwgXCJjb2xvcjogIzM5NkNCOFwiLCBcIlwiLCAuLi5uZXNzYWdlKTtcbiAgfVxuXG4gIHN0YXRpYyBsb2cobW9kdWxlLCAuLi5tZXNzYWdlKSB7XG4gICAgdGhpcy5fbG9nKFwibG9nXCIsIG1vZHVsZSwgLi4ubWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgaW5mbyhtb2R1bGUsIC4uLm1lc3NhZ2UpIHtcbiAgICB0aGlzLl9sb2coXCJpbmZvXCIsIG1vZHVsZSwgLi4ubWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgd2Fybihtb2R1bGUsIC4uLm1lc3NhZ2UpIHtcbiAgICB0aGlzLl9sb2coXCJ3YXJuXCIsIG1vZHVsZSwgLi4ubWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgZXJyb3IobW9kdWxlLCAuLi5tZXNzYWdlKSB7XG4gICAgdGhpcy5fbG9nKFwiZXJyb3JcIiwgbW9kdWxlLCAuLi5tZXNzYWdlKTtcbiAgfVxuXG59IiwiaW1wb3J0IElQQyBmcm9tIFwiY29tbW9uL2lwY1wiO1xuaW1wb3J0IHsgSVBDRXZlbnRzIH0gZnJvbSBcImNvbW1vbi9jb25zdGFudHNcIjtcbmltcG9ydCBET00gZnJvbSBcImNvbW1vbi9kb21cIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcImNvbW1vbi9sb2dnZXJcIjtcbkxvZ2dlci5sb2coXCJCYWNrZW5kXCIsIFwiSW5pdGlhbGl6aW5nIG1vZHVsZXNcIik7XG5jb25zdCBpcGNNYWluID0gbmV3IElQQyhcImJhY2tlbmRcIik7XG5Mb2dnZXIubG9nKFwiQmFja2VuZFwiLCBcIlJlZ2lzdGVyaW5nIGV2ZW50c1wiKTtcbmlwY01haW4ub24oSVBDRXZlbnRzLklOSkVDVF9DU1MsIChfLCBkYXRhKSA9PiB7XG4gIERPTS5pbmplY3RDU1MoZGF0YS5pZCwgZGF0YS5jc3MpO1xufSk7XG5pcGNNYWluLm9uKElQQ0V2ZW50cy5JTkpFQ1RfVEhFTUUsIChfLCBkYXRhKSA9PiB7XG4gIERPTS5pbmplY3RUaGVtZShkYXRhLmlkLCBkYXRhLmNzcyk7XG59KTtcbmlwY01haW4ub24oSVBDRXZlbnRzLk1BS0VfUkVRVUVTVFMsIChldmVudCwgZGF0YSkgPT4ge1xuICBmZXRjaChkYXRhLnVybCkuY2F0Y2goY29uc29sZS5lcnJvci5iaW5kKG51bGwsIFwiUkVRVUVTVCBGQUlMRUQ6XCIpKS50aGVuKHJlcyA9PiByZXMudGV4dCgpKS50aGVuKHRleHQgPT4ge1xuICAgIGlwY01haW4ucmVwbHkoZXZlbnQsIHRleHQpO1xuICB9KTtcbn0pO1xuXG5jb25zdCBTQ1JJUFRfVVJMID0gKCgpID0+IHtcbiAgc3dpdGNoIChFTlYpIHtcbiAgICBjYXNlIFwicHJvZHVjdGlvblwiOlxuICAgICAgcmV0dXJuIFwiaHR0cHM6Ly9zdHJlbmNoZXIuZ2l0aHViLmlvL0JkQnJvd3Nlci9kaXN0L2Zyb250ZW5kLmpzXCI7XG5cbiAgICBjYXNlIFwiZGV2ZWxvcG1lbnRcIjpcbiAgICAgIHJldHVybiBcImh0dHA6Ly8xMjcuMC4wLjE6NTUwMC9mcm9udGVuZC5qc1wiO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gRW52aXJvbm1lbnRcIik7XG4gIH1cbn0pKCk7XG5cbkxvZ2dlci5sb2coXCJCYWNrZW5kXCIsIFwiTG9hZGluZyBmcm9udGVuZCBzY3JpcHQgZnJvbVwiLCBTQ1JJUFRfVVJMKTtcbkRPTS5pbmplY3RKUyhcIkJldHRlckRpc2NvcmRCcm93c2VyLWZyb250ZW5kXCIsIFNDUklQVF9VUkwsIGZhbHNlKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///984\n')}},__webpack_exports__={};__webpack_modules__[984]()})();