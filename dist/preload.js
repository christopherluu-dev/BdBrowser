const Module=require("module"),path=require("path"),electron=require("electron"),NodeEvents=require("events"),cloneObject=function(e,r={},t){return Array.isArray(t)||(t=Object.keys(Object.getOwnPropertyDescriptors(e))),t.reduce(((r,t)=>("object"!=typeof e[t]||Array.isArray(e[t])||null===e[t]||e[t]instanceof NodeEvents?r[t]=e[t]:r[t]=cloneObject(e[t],{}),r)),r)};Object.defineProperty(window,"webpackJsonp",{get:()=>electron.webFrame.top.context.webpackJsonp}),electron.webFrame.top.context.global=electron.webFrame.top.context,electron.webFrame.top.context.require=require,electron.webFrame.top.context.Buffer=Buffer,electron.webFrame.top.context.process=new class PatchedProcess extends NodeEvents{get __ORIGINAL_PROCESS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED__(){return process}constructor(){super(),Object.assign(this,cloneObject(process,{},Object.keys(NodeEvents.prototype)),cloneObject(process,{}))}};const preload=process.env.DISCORD_PRELOAD;if(preload){electron.ipcRenderer.send("bd-register-preload",preload);try{const e=process.kill;process.kill=function(){},require(preload),process.kill=e}catch(e){}}Module.globalPaths.push(path.resolve(process.env.DISCORD_APP_PATH,"..","app.asar","node_modules"));